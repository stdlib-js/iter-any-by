{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert-is-iterator-like' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/error-tools-fmtprodmsg' );\n\n\n// MAIN //\n\n/**\n* Tests whether at least one iterated value passes a test implemented by a predicate function.\n*\n* @param {Iterator} iterator - input iterator\n* @param {Function} predicate - predicate function\n* @param {*} [thisArg] - execution context\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a function\n* @returns {boolean} boolean indicating whether at least one iterated value passes a test implemented by a predicate function\n*\n* @example\n* var array2iterator = require( '@stdlib/array-to-iterator' );\n*\n* function predicate( v ) {\n*     return ( v === 1 );\n* }\n*\n* var it = array2iterator( [ 0, 0, 0, 0, 1 ] );\n*\n* var bool = iterAnyBy( it, predicate );\n* // returns true\n*/\nfunction iterAnyBy( iterator, predicate, thisArg ) {\n\tvar v;\n\tvar i;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( '0CB48', iterator ) );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( '0CB2S', predicate ) );\n\t}\n\ti = -1;\n\twhile ( true ) {\n\t\ti += 1;\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\tif ( predicate.call( thisArg, v.value, i ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterAnyBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test whether at least one iterated value passes a test implemented by a predicate function.\n*\n* @module @stdlib/iter-any-by\n*\n* @example\n* var array2iterator = require( '@stdlib/array-to-iterator' );\n* var iterAnyBy = require( '@stdlib/iter-any-by' );\n*\n* function predicate( v ) {\n*     return ( v === 1 );\n* }\n*\n* var it = array2iterator( [ 0, 0, 0, 0, 1 ] );\n*\n* var bool = iterAnyBy( it );\n* // returns true\n*/\n\n// MODULES //\n\nvar iterAnyBy = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterAnyBy;\n"],"names":["isIteratorLike","require$$0","isFunction","require$$1","format","require$$2","lib","iterator","predicate","thisArg","v","i","TypeError","next","done","call","value"],"mappings":";;2QAsBA,IAAIA,EAAiBC,EACjBC,EAAaC,EACbC,EAASC,EAqDb,IC/BAC,EDKA,SAAoBC,EAAUC,EAAWC,GACxC,IAAIC,EACAC,EACJ,IAAMX,EAAgBO,GACrB,MAAM,IAAIK,UAAWR,EAAQ,QAASG,IAEvC,IAAML,EAAYM,GACjB,MAAM,IAAII,UAAWR,EAAQ,QAASI,IAGvC,IADAG,GAAK,EAEJA,GAAK,IACLD,EAAIH,EAASM,QACNC,MAGP,GAAKN,EAAUO,KAAMN,EAASC,EAAEM,MAAOL,GACtC,OAAO,EAGT,OAAO"}